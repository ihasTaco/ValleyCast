name: Build and Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write
  actions: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'

    - name: Restore dependencies
      run: dotnet restore ValleyCast.csproj

    - name: Set up dummy game path
      run: mkdir -p /home/runner/work/game_path

    - name: Copy necessary assemblies to dummy game path
      run: |
        cp -r .github/Assemblies/* /home/runner/work/game_path/

    - name: Build the project
      run: |
        export GamePath=/home/runner/work/game_path
        export MSBUILDDISABLEREALPATH=1
        dotnet build ValleyCast.csproj --configuration Release --output ./build --no-restore

    - name: Create release directory
      run: mkdir -p release

    - name: Move necessary files to release directory
      run: |
        rm -rf ./build/*
        cp ./build/ValleyCast.dll ./release/
        cp .github/Assemblies/websocket-sharp-core.dll ./release/
        cp manifest.json ./release/

    - name: Zip release files
      run: |
        cd release
        zip -r ../ValleyCast.zip ValleyCast.dll manifest.json websocket-sharp-core.dll

    - name: Determine next version
      id: get-version
      run: |
        git fetch --tags
        TAG=$(git tag --sort=-v:refname | head -n 1)
        echo "Latest tag: $TAG"

        if [[ -z "$TAG" ]]; then
          NEW_TAG="v0.0.1"
        else
          IFS='.' read -r -a VERSION_PARTS <<< "${TAG//v/}"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          PATCH=$((PATCH + 1))
          NEW_TAG="v$MAJOR.$MINOR.$PATCH"
        fi

        echo "New tag will be: $NEW_TAG"
        echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV

    - name: Create new tag
      run: |
        git config --local user.name "GitHub Actions"
        git config --local user.email "actions@github.com"
        git tag $NEW_TAG
        git push origin $NEW_TAG
      env:
        NEW_TAG: ${{ env.NEW_TAG }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create GitHub Release and Upload Assets
      uses: softprops/action-gh-release@v1
      with:
        files: ./ValleyCast.zip
        tag_name: ${{ env.NEW_TAG }}
        name: "Release ${{ env.NEW_TAG }}"
        body: "Automatic release of version ${{ env.NEW_TAG }}."
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
